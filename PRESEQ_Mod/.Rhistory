xlab("Total Reads Sequenced") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#axis.title.x = element_blank(),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes(group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT)) +
geom_line(size=0.5, col=data$Shot.PercEnd) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
scale_color_startrek(name="Rounds of Capture", labels=(c("1", "2", "1 (Tissue)"))) +
xlab("Total Reads Sequenced") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#axis.title.x = element_blank(),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes(group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=Shot.PercEnd)) +
geom_line(size=0.5) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
scale_color_startrek(name="Rounds of Capture", labels=(c("1", "2", "1 (Tissue)"))) +
xlab("Total Reads Sequenced") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#axis.title.x = element_blank(),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes(group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=Cap.Rounds)) +
geom_line(size=0.5) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
scale_color_startrek(name="Rounds of Capture", labels=(c("1", "2", "1 (Tissue)"))) +
xlab("Total Reads Sequenced") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#axis.title.x = element_blank(),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes(group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=CapRounds)) +
geom_line(size=0.5) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
scale_color_startrek(name="Rounds of Capture", labels=(c("1", "2", "1 (Tissue)"))) +
xlab("Total Reads Sequenced") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#axis.title.x = element_blank(),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes(group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=CapRounds)) +
geom_line(size=0.5) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
#scale_color_startrek(name="Rounds of Capture", labels=(c("1", "2", "1 (Tissue)"))) +
xlab("Total Reads Sequenced") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#axis.title.x = element_blank(),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
data$CapRounds=as.factor(data$CapRounds)
ggplot(data, aes(group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=CapRounds)) +
geom_line(size=0.5) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
#scale_color_startrek(name="Rounds of Capture", labels=(c("1", "2", "1 (Tissue)"))) +
xlab("Total Reads Sequenced") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#axis.title.x = element_blank(),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes( group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=Shot.PercEnd)) +
geom_line(size=0.5) +
geom_line(data=kilo[ which(kilo$Sample.Type=="Tissue"), ], aes(group=Sample, x = adjusted_total_reads ,  y = EXPECTED_DISTINCT), col="black") +
#geom_line(data=kilo[ which(kilo$Sample.Type=="Tissue"), ], aes(group=Sample, x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col="Tissue Sample")) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
#scale_color_gradient(name="Percent\nSubject\nDNA", trans="log", breaks=c(3,30), low="red", high="blue") +
xlab("Total Reads Sequenced (Millions of Reads)") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes( group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=Shot.PercEnd)) +
geom_line(size=0.5) +
#geom_line(data=kilo[ which(kilo$Sample.Type=="Tissue"), ], aes(group=Sample, x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col="Tissue Sample")) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
#scale_color_gradient(name="Percent\nSubject\nDNA", trans="log", breaks=c(3,30), low="red", high="blue") +
xlab("Total Reads Sequenced (Millions of Reads)") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes( group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=Shot.PercEnd)) +
geom_line(size=0.5) +
#geom_line(data=kilo[ which(kilo$Sample.Type=="Tissue"), ], aes(group=Sample, x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col="Tissue Sample")) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
scale_color_gradient(name="Percent\nSubject\nDNA", trans="log", breaks=c(3,30), low="red", high="blue") +
xlab("Total Reads Sequenced (Millions of Reads)") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes( group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=Shot.PercEnd)) +
geom_line(size=0.5) +
geom_line(data=kilo[ which(kilo$Sample.Type=="Tissue"), ], aes(group=Sample, x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col="Tissue Sample")) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
scale_color_gradient(name="Percent\nSubject\nDNA", trans="log", breaks=c(3,30), low="red", high="blue") +
xlab("Total Reads Sequenced (Millions of Reads)") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes( group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=Shot.PercEnd)) +
geom_line(size=0.5) +
geom_line(data=kilo[ which(data$Sample.Type=="Tissue"), ], aes(group=Sample, x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col="Tissue Sample")) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
scale_color_gradient(name="Percent\nSubject\nDNA", trans="log", breaks=c(3,30), low="red", high="blue") +
xlab("Total Reads Sequenced (Millions of Reads)") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes( group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=Shot.PercEnd)) +
geom_line(size=0.5) +
geom_line(data=data[ which(data$Sample.Type=="Tissue"), ], aes(group=Sample, x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col="Tissue Sample")) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
scale_color_gradient(name="Percent\nSubject\nDNA", trans="log", breaks=c(3,30), low="red", high="blue") +
xlab("Total Reads Sequenced (Millions of Reads)") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes( group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=Shot.PercEnd)) +
geom_line(size=0.5) +
#geom_line(data=data[ which(data$Sample.Type=="Tissue"), ], aes(group=Sample, x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col="Tissue Sample")) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
scale_color_gradient(name="Percent\nSubject\nDNA", trans="log", breaks=c(3,30), low="red", high="blue") +
xlab("Total Reads Sequenced (Millions of Reads)") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.title = element_text(size=15),
legend.text = element_text(size=15))
interpolate_y_at_x_from_two_neighbours <- function(neighbour_xs,neighbour_ys,x){
slope <- (neighbour_ys[2]-neighbour_ys[1])/(neighbour_xs[2]-neighbour_xs[1])
dist_from <- x - neighbour_xs[1]
y_from <- neighbour_ys[1]
y_from + (slope * dist_from)
}
x_query <- 15e6 # <-number of production reads
caught <- data[ , .(dist_from_xquery = x_query - adjusted_total_reads , adjusted_total_reads , EXPECTED_DISTINCT , nearest = x_query - adjusted_total_reads ) , by="Sample"]
rm(list = ls())
require(magrittr); require(data.table); require(plyr); require(parallel); require(dplyr); library(ggplot2)
import.multiple.csv.files=function(mypath,mypattern)
{
tmp.list.1<-list.files(mypath, pattern=mypattern)
tmp.list.2<-list(length=length(tmp.list.1))
for (i in 1:length(tmp.list.1)){tmp.list.2[[i]]<-read.csv(tmp.list.1[i], header=TRUE)}
names(tmp.list.2)<-tmp.list.1
tmp.list.2
}
setwd("./SampleExomeProjection")
preseqfiles =import.multiple.csv.files("./", mypattern="_Exome_projection.csv$")
setwd("../")
y=as.vector(NULL)
for (i in names(preseqfiles)) {
x=sub("_Exome_projection.csv","", i)
y=c(y, x)
names(preseqfiles)=c(y)
}
trot=read.csv("MappingRate2.csv")
trot <- as.data.table(trot)
data <- lapply(preseqfiles %>% names , function(d) as.data.table(preseqfiles[[d]])[ , Sample := d]  ) %>% bind_rows
data <-  trot[data,on="Sample"][,adjusted_total_reads := TOTAL_READS / Enriched.TargetMapRate][]
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# turn the 'e+' into plotmath format
l <- gsub("e", "%*%10^", l)
# return this as an expression
parse(text=l)
}
data$CapRounds=as.factor(data$CapRounds)
ggplot(data, aes(group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=CapRounds)) +
geom_line(size=0.5) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
xlab("Total Reads Sequenced") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes( group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=Shot.PercEnd)) +
geom_line(size=0.5) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
scale_color_gradient(name="Percent\nSubject\nDNA", trans="log", breaks=c(3,30), low="red", high="blue") +
xlab("Total Reads Sequenced (Millions of Reads)") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=15))
interpolate_y_at_x_from_two_neighbours <- function(neighbour_xs,neighbour_ys,x){
slope <- (neighbour_ys[2]-neighbour_ys[1])/(neighbour_xs[2]-neighbour_xs[1])
dist_from <- x - neighbour_xs[1]
y_from <- neighbour_ys[1]
y_from + (slope * dist_from)
}
x_query <- 15e6 # <-number of production reads
caught <- data[ , .(dist_from_xquery = x_query - adjusted_total_reads , adjusted_total_reads , EXPECTED_DISTINCT , nearest = x_query - adjusted_total_reads ) , by="Sample"]
catcher <- data[,.N,Sample][,N := NULL][ , dist_from_xquery := 0][]
b <- caught[catcher,,on=c("Sample","dist_from_xquery"),roll=T]
a <- caught[catcher,,on=c("Sample","dist_from_xquery"),roll=-Inf]
near <- bind_rows(a,b); rm(a,b)
near[order(Sample)]
interp <- near[, exp_distinct_at_xquery := interpolate_y_at_x_from_two_neighbours(neighbour_xs = adjusted_total_reads , neighbour_ys = EXPECTED_DISTINCT , x = x_query ) ,Sample]
data$Sample %>% unique() %>% `[`(1:10) ->  ten_samples
ggplot(data, aes( group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT )) + geom_line(size=.2) + geom_point(data=interp,aes(x=x_query , y = exp_distinct_at_xquery)) + xlim(c(0,1e8))
write.csv(interp[,.(Sample,exp_distinct_at_xquery)], "test_15M.csv")
rm(list = ls())
require(magrittr); require(data.table); require(plyr); require(parallel); require(dplyr); library(ggplot2)
import.multiple.csv.files=function(mypath,mypattern)
{
tmp.list.1<-list.files(mypath, pattern=mypattern)
tmp.list.2<-list(length=length(tmp.list.1))
for (i in 1:length(tmp.list.1)){tmp.list.2[[i]]<-read.csv(tmp.list.1[i], header=TRUE)}
names(tmp.list.2)<-tmp.list.1
tmp.list.2
}
setwd("./SampleExomeProjection")
preseqfiles =import.multiple.csv.files("./", mypattern="_Exome_projection.csv$")
setwd("../")
y=as.vector(NULL)
for (i in names(preseqfiles)) {
x=sub("_Exome_projection.csv","", i)
y=c(y, x)
names(preseqfiles)=c(y)
}
trot=read.csv("MappingRate2.csv")
trot <- as.data.table(trot)
data <- lapply(preseqfiles %>% names , function(d) as.data.table(preseqfiles[[d]])[ , Sample := d]  ) %>% bind_rows
data <-  trot[data,on="Sample"][,adjusted_total_reads := TOTAL_READS / Enriched.TargetMapRate][]
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# turn the 'e+' into plotmath format
l <- gsub("e", "%*%10^", l)
# return this as an expression
parse(text=l)
}
data$CapRounds=as.factor(data$CapRounds)
ggplot(data, aes(group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=CapRounds)) +
geom_line(size=0.5) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
xlab("Total Reads Sequenced") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes( group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=Shot.PercEnd)) +
geom_line(size=0.5) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
scale_color_gradient(name="Percent\nSubject\nDNA", trans="log", breaks=c(3,30), low="red", high="blue") +
xlab("Total Reads Sequenced (Millions of Reads)") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=15))
interpolate_y_at_x_from_two_neighbours <- function(neighbour_xs,neighbour_ys,x){
slope <- (neighbour_ys[2]-neighbour_ys[1])/(neighbour_xs[2]-neighbour_xs[1])
dist_from <- x - neighbour_xs[1]
y_from <- neighbour_ys[1]
y_from + (slope * dist_from)
}
x_query <- 15e6 # <-number of production reads.
caught <- data[ , .(dist_from_xquery = x_query - adjusted_total_reads , adjusted_total_reads , EXPECTED_DISTINCT , nearest = x_query - adjusted_total_reads ) , by="Sample"]
catcher <- data[,.N,Sample][,N := NULL][ , dist_from_xquery := 0][]
b <- caught[catcher,,on=c("Sample","dist_from_xquery"),roll=T]
a <- caught[catcher,,on=c("Sample","dist_from_xquery"),roll=-Inf]
near <- bind_rows(a,b); rm(a,b)
near[order(Sample)]
interp <- near[, exp_distinct_at_xquery := interpolate_y_at_x_from_two_neighbours(neighbour_xs = adjusted_total_reads , neighbour_ys = EXPECTED_DISTINCT , x = x_query ) ,Sample]
ggplot(data, aes( group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT )) + geom_line(size=.2) + geom_point(data=interp,aes(x=x_query , y = exp_distinct_at_xquery)) + xlim(c(0,1e8))
x_query <- c(10e6, 15e6, 20e6) # <-number of production reads. Tim, can we put a list of numbers in here?
caught <- data[ , .(dist_from_xquery = x_query - adjusted_total_reads , adjusted_total_reads , EXPECTED_DISTINCT , nearest = x_query - adjusted_total_reads ) , by="Sample"]
rm(list = ls())
library(Hmisc)
library(ggsci)
library(ggplot2)
library(gridExtra)
library(grid)
library(scales)
library(ggsignif)
library(reshape2)
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# turn the 'e+' into plotmath format
l <- gsub("e", "%*%10^", l)
# return this as an expression
parse(text=l)
}
fox = read.csv("MethodsPprData.csv", header=TRUE, na.strings=c(NA))
setwd("D:/Users/lauren_white/Dropbox/ChimpPoop/MethodsPaper")
fox = read.csv("MethodsPprData.csv", header=TRUE, na.strings=c(NA))
fox$Enriched.MappedFrags=(fox$Enriched.MappedPaired/2) + fox$Enriched.MappedCollapsed
fox$Shot.MappedFrags=(fox$Shot.MappedPaired/2) + fox$Shot.MappedCollapsed
fox$Enriched.DedupFrags=(fox$Enriched.DedupPaired/2) + fox$Enriched.DedupCollapsed
fox$Shot.DedupFrags=(fox$Shot.DedupPaired/2) + fox$Shot.DedupCollapsed
fox$Enriched.FilteredFrags=(fox$Enriched.FilteredPaired/2) + fox$Enriched.FilteredCollapsed
fox$Shot.FilteredFrags=(fox$Shot.FilteredPaired/2) + fox$Shot.FilteredCollapsed
fox$Enriched.ExomeFrags=(fox$Enriched.ExomePaired/2) + fox$Enriched.ExomeCollapsed
fox$Shot.ExomeFrags=(fox$Shot.ExomePaired/2) + fox$Shot.ExomeCollapsed
fox$Enriched.ExomeDedupFrags=(fox$Enriched.ExomeDedupPaired/2) + fox$Enriched.ExomeDedupCollapsed
fox$Shot.ExomeDedupFrags=(fox$Shot.ExomeDedupPaired/2) + fox$Shot.ExomeDedupCollapsed
fox$Enriched.MapRate=fox$Enriched.MappedFrags/fox$Enriched.TotalPairs
fox$Shot.MapRate=fox$Shot.MappedFrags/fox$Shot.TotalPairs
fox$Enriched.TargetMapRate=fox$Enriched.ExomeFrags/fox$Enriched.TotalPairs
fox$Shot.TargetMapRate=fox$Shot.ExomeFrags/fox$Shot.TotalPairs
fox$Enriched.TargetMapRateDedup=fox$Enriched.ExomeDedupFrags/fox$Enriched.TotalPairs
fox$Shot.TargetMapRateDedup=fox$Shot.ExomeDedupFrags/fox$Shot.TotalPairs
fox$fold=fox$Enriched.TargetMapRateDedup/fox$Shot.TargetMapRateDedup
write.csv(fox, "methodsdata2.csv")
setwd("D:/Users/lauren_white/Dropbox/ChimpPoop/MethodsPaper/ForGit/PRESEQ_Mod")
rm(list = ls())
require(magrittr); require(data.table); require(plyr); require(parallel); require(dplyr); library(ggplot2)
import.multiple.csv.files=function(mypath,mypattern)
{
tmp.list.1<-list.files(mypath, pattern=mypattern)
tmp.list.2<-list(length=length(tmp.list.1))
for (i in 1:length(tmp.list.1)){tmp.list.2[[i]]<-read.csv(tmp.list.1[i], header=TRUE)}
names(tmp.list.2)<-tmp.list.1
tmp.list.2
}
setwd("./SampleExomeProjection")
preseqfiles =import.multiple.csv.files("./", mypattern="_Exome_projection.csv$")
setwd("../")
y=as.vector(NULL)
for (i in names(preseqfiles)) {
x=sub("_Exome_projection.csv","", i)
y=c(y, x)
names(preseqfiles)=c(y)
}
trot=read.csv("MappingRate2.csv")
trot=read.csv("MappingRate.csv")
trot <- as.data.table(trot)
data <- lapply(preseqfiles %>% names , function(d) as.data.table(preseqfiles[[d]])[ , Sample := d]  ) %>% bind_rows
data <-  trot[data,on="Sample"][,adjusted_total_reads := TOTAL_READS / Enriched.TargetMapRate][]
fancy_scientific <- function(l) {
l <- format(l, scientific = TRUE)
l <- gsub("^(.*)e", "'\\1'e", l)
l <- gsub("e", "%*%10^", l)
parse(text=l)
}
data$CapRounds=as.factor(data$CapRounds)
ggplot(data, aes(group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=CapRounds)) +
geom_line(size=0.5) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
xlab("Total Reads Sequenced") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=15))
ggplot(data, aes( group = Sample , x = adjusted_total_reads ,  y = EXPECTED_DISTINCT, col=Shot.PercEnd)) +
geom_line(size=0.5) +
scale_y_continuous(labels = fancy_scientific, limits=c(0, 1e7)) +
scale_x_continuous(labels=c(0, 5, 10, 15, 20),limits = c(0, 20000000)) +
scale_color_gradient(name="Percent\nSubject\nDNA", trans="log", breaks=c(3,30), low="red", high="blue") +
xlab("Total Reads Sequenced (Millions of Reads)") + ylab("Predicted Number of\nUnique Exome Reads") +
theme(plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=15),
axis.title = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=15))
interpolate_y_at_x_from_two_neighbours <- function(neighbour_xs,neighbour_ys,x){
slope <- (neighbour_ys[2]-neighbour_ys[1])/(neighbour_xs[2]-neighbour_xs[1])
dist_from <- x - neighbour_xs[1]
y_from <- neighbour_ys[1]
y_from + (slope * dist_from)
}
x_query <- 15e6 # <-number of production reads. Tim, can we put a list of numbers in here?
caught <- data[ , .(dist_from_xquery = x_query - adjusted_total_reads , adjusted_total_reads , EXPECTED_DISTINCT , nearest = x_query - adjusted_total_reads ) , by="Sample"]
catcher <- data[,.N,Sample][,N := NULL][ , dist_from_xquery := 0][]
b <- caught[catcher,,on=c("Sample","dist_from_xquery"),roll=T]
a <- caught[catcher,,on=c("Sample","dist_from_xquery"),roll=-Inf]
near <- bind_rows(a,b); rm(a,b)
near[order(Sample)]
interp <- near[, exp_distinct_at_xquery := interpolate_y_at_x_from_two_neighbours(neighbour_xs = adjusted_total_reads , neighbour_ys = EXPECTED_DISTINCT , x = x_query ) ,Sample]
